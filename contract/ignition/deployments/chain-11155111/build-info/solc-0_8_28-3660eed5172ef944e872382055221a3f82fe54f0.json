{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-3660eed5172ef944e872382055221a3f82fe54f0",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/HuddleUpProtocol.sol": "project/contracts/HuddleUpProtocol.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/HuddleUpProtocol.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title HuddleUpProtocol\n * @dev Smart contract for managing event funding, participation, and airdrops\n * @notice This contract handles PYUSD funding, participant management, and airdrop distribution\n */\ncontract HuddleUpProtocol is ReentrancyGuard, Ownable {\n    // PYUSD token contract\n    IERC20 public immutable pyusdToken;\n\n    // Event structure\n    struct Event {\n        // dbEventId removed, the mapping key IS the ID\n        address organizer;          // Event organizer address\n        address sponsor;            // Event sponsor address\n        uint256 fundingRequired;    // Total funding required\n        uint256 airdropAmount;      // Airdrop amount per participant (100 PYUSD)\n        uint256 eventDate;          // Event date timestamp\n        uint256 totalFunding;       // Total funding received\n        bool isFunded;              // Whether event is funded\n        bool isCompleted;           // Whether event is completed\n        bool exists;                // Whether event exists\n    }\n\n    // Participant structure\n    struct Participant {\n        bool isActive;              // Whether participant is currently active\n        bool hasReceivedAirdrop;    // Whether participant has received airdrop\n        uint256 joinedAt;           // Timestamp when joined\n        uint256 leftAt;             // Timestamp when left (0 if still active)\n    }\n\n    // State variables\n    // nextEventId removed\n    mapping(bytes32 => Event) public events;  // onchainEventId (bytes32) => Event data\n    mapping(bytes32 => mapping(address => Participant)) public participants;  // Event ID => Participant address => Participant data\n    mapping(bytes32 => address[]) public eventParticipants;  // Event ID => Array of participant addresses\n\n    // Events\n    event EventCreated(bytes32 indexed onchainEventId, address indexed organizer, uint256 fundingRequired, uint256 airdropAmount, uint256 eventDate);\n    event EventFunded(bytes32 indexed eventId, address indexed sponsor, uint256 amount);\n    event ParticipantJoined(bytes32 indexed eventId, address indexed participant);\n    event ParticipantLeft(bytes32 indexed eventId, address indexed participant);\n    event ParticipantVerified(bytes32 indexed eventId, address indexed participant, uint256 airdropAmount);\n    event FundsWithdrawn(bytes32 indexed eventId, address indexed sponsor, uint256 amount);\n\n    // Errors\n    error EventNotFound();\n    error EventAlreadyExists(); // Renamed from EventAlreadyFunded for clarity\n    error EventNotFunded();\n    error EventDateInPast();\n    error EventDateNotReached();\n    error NotOrganizer();\n    error NotSponsor();\n    error AlreadyParticipant();\n    error NotParticipant();\n    error AlreadyReceivedAirdrop();\n    error InsufficientFunding();\n    error TransferFailed();\n    error WithdrawalNotAllowed();\n    error InvalidEventId();\n\n    /**\n     * @dev Constructor\n     * @param _pyusdToken Address of the PYUSD token contract\n     */\n    constructor(address _pyusdToken) Ownable(msg.sender) {\n        require(_pyusdToken != address(0), \"Invalid PYUSD token address\");\n        pyusdToken = IERC20(_pyusdToken);\n    }\n\n\n    /**\n     * @dev Fund an event (creates event on-chain and marks as funded)\n     * @param _onchainEventId The bytes32 ID generated by the backend\n     * @param _organizer Event organizer address\n     * @param _fundingRequired Total funding required\n     * @param _airdropAmount Airdrop amount per participant (100 PYUSD)\n     * @param _eventDate Event date timestamp\n     * @param _fundingAmount Amount to fund the event\n     */\n    function fundEvent(\n        bytes32 _onchainEventId,\n        address _organizer,\n        uint256 _fundingRequired,\n        uint256 _airdropAmount,\n        uint256 _eventDate,\n        uint256 _fundingAmount\n    ) external nonReentrant {\n        // *** FIX: Use custom errors instead of require strings ***\n        if (_onchainEventId == 0) revert InvalidEventId();\n        if (events[_onchainEventId].exists) revert EventAlreadyExists();\n        \n        require(_organizer != address(0), \"Invalid organizer address\");\n        require(_fundingRequired > 0, \"Funding required must be greater than 0\");\n        require(_airdropAmount > 0, \"Airdrop amount must be greater than 0\");\n        require(_eventDate > block.timestamp, \"Event date must be in the future\");\n        require(_fundingAmount > 0, \"Funding amount must be greater than 0\");\n\n        // Transfer PYUSD from sponsor to contract\n        bool success = pyusdToken.transferFrom(msg.sender, address(this), _fundingAmount);\n        if (!success) revert TransferFailed();\n\n        // No nextEventId++, use the provided ID\n        events[_onchainEventId] = Event({\n            organizer: _organizer,\n            sponsor: msg.sender,\n            fundingRequired: _fundingRequired,\n            airdropAmount: _airdropAmount,\n            eventDate: _eventDate,\n            totalFunding: _fundingAmount,\n            isFunded: true,\n            isCompleted: false,\n            exists: true\n        });\n\n        emit EventCreated(_onchainEventId, _organizer, _fundingRequired, _airdropAmount, _eventDate);\n        emit EventFunded(_onchainEventId, msg.sender, _fundingAmount);\n        \n        // No return value\n    }\n\n    /**\n     * @dev Join an event as a participant\n     * @param _eventId The bytes32 event ID\n     */\n    function joinEvent(bytes32 _eventId) external {\n        Event storage eventData = events[_eventId];\n        if (!eventData.exists) revert EventNotFound();\n        if (!eventData.isFunded) revert EventNotFunded();\n\n        Participant storage participant = participants[_eventId][msg.sender];\n\n        // If participant was previously active, reactivate them\n        if (participant.isActive) revert AlreadyParticipant();\n\n        // If participant left before, reactivate them\n        if (participant.leftAt > 0) {\n            participant.isActive = true;\n            participant.leftAt = 0;\n        } else {\n            // New participant\n            participant.isActive = true;\n            participant.joinedAt = block.timestamp;\n            participant.hasReceivedAirdrop = false;\n            eventParticipants[_eventId].push(msg.sender);\n        }\n\n        emit ParticipantJoined(_eventId, msg.sender);\n    }\n\n    /**\n     * @dev Leave an event\n     * @param _eventId The bytes32 event ID\n     */\n    function leaveEvent(bytes32 _eventId) external {\n        Event storage eventData = events[_eventId];\n        if (!eventData.exists) revert EventNotFound();\n\n        Participant storage participant = participants[_eventId][msg.sender];\n        if (!participant.isActive) revert NotParticipant();\n\n        participant.isActive = false;\n        participant.leftAt = block.timestamp;\n\n        emit ParticipantLeft(_eventId, msg.sender);\n    }\n\n    /**\n     * @dev Verify participant and distribute airdrop (only organizer can call)\n     * @param _eventId The bytes32 event ID\n     * @param _participant Participant address to verify\n     */\n    function verifyParticipant(bytes32 _eventId, address _participant) external nonReentrant {\n        Event storage eventData = events[_eventId];\n        if (!eventData.exists) revert EventNotFound();\n        if (msg.sender != eventData.organizer) revert NotOrganizer();\n        if (!eventData.isFunded) revert EventNotFunded();\n\n        Participant storage participant = participants[_eventId][_participant];\n        if (!participant.isActive) revert NotParticipant();\n        if (participant.hasReceivedAirdrop) revert AlreadyReceivedAirdrop();\n\n        // Check if contract has enough PYUSD for airdrop\n        if (pyusdToken.balanceOf(address(this)) < eventData.airdropAmount) {\n            revert InsufficientFunding();\n        }\n\n        // Mark participant as having received airdrop\n        participant.hasReceivedAirdrop = true;\n\n        // Transfer airdrop to participant\n        bool success = pyusdToken.transfer(_participant, eventData.airdropAmount);\n        if (!success) revert TransferFailed();\n\n        emit ParticipantVerified(_eventId, _participant, eventData.airdropAmount);\n    }\n\n    /**\n     * @dev Withdraw remaining funds (only sponsor can call, 1 day after event date)\n     * @param _eventId The bytes32 event ID\n     */\n    function withdrawRemainingFunds(bytes32 _eventId) external nonReentrant {\n        Event storage eventData = events[_eventId];\n        if (!eventData.exists) revert EventNotFound();\n        if (msg.sender != eventData.sponsor) revert NotSponsor();\n        if (block.timestamp < eventData.eventDate + 1 days) revert WithdrawalNotAllowed();\n\n        // Calculate remaining funds\n        uint256 totalAirdropsDistributed = 0;\n        address[] memory participantsList = eventParticipants[_eventId];\n\n        for (uint256 i = 0; i < participantsList.length; i++) {\n            if (participants[_eventId][participantsList[i]].hasReceivedAirdrop) {\n                totalAirdropsDistributed += eventData.airdropAmount;\n            }\n        }\n\n        uint256 remainingFunds = eventData.totalFunding - totalAirdropsDistributed;\n\n        if (remainingFunds > 0) {\n            // Check contract has enough balance before transferring\n            if(pyusdToken.balanceOf(address(this)) < remainingFunds) {\n                // This case should ideally not be hit if logic is correct, but as a safeguard\n                remainingFunds = pyusdToken.balanceOf(address(this));\n            }\n            \n            if (remainingFunds > 0) {\n                bool success = pyusdToken.transfer(eventData.sponsor, remainingFunds);\n                if (!success) revert TransferFailed();\n                \n                emit FundsWithdrawn(_eventId, eventData.sponsor, remainingFunds);\n            }\n        }\n    }\n\n    /**\n     * @dev Get event details\n     * @param _eventId The bytes32 event ID\n     */\n    function getEvent(bytes32 _eventId) external view returns (Event memory) {\n        if (!events[_eventId].exists) revert EventNotFound();\n        return events[_eventId];\n    }\n\n    /**\n     * @dev Get participant details\n     * @param _eventId The bytes32 event ID\n     * @param _participant Participant address\n     */\n    function getParticipant(bytes32 _eventId, address _participant) external view returns (Participant memory) {\n        if (!events[_eventId].exists) revert EventNotFound();\n        return participants[_eventId][_participant];\n    }\n\n    /**\n     * @dev Get all participants for an event\n     * @param _eventId The bytes32 event ID\n     */\n    function getEventParticipants(bytes32 _eventId) external view returns (address[] memory) {\n        if (!events[_eventId].exists) revert EventNotFound();\n        return eventParticipants[_eventId];\n    }\n}"
      }
    }
  }
}